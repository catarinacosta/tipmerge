/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package br.uff.ic.gems.tipmerge.gui;

import br.uff.ic.gems.tipmerge.util.RunGit;

/**
 *
 * @author Catarina
 */
public class JFrameAssign extends javax.swing.JFrame {

	/**
	 * Creates new form JFrameAssign
	 */
	public JFrameAssign() {
		initComponents();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel2 = new javax.swing.JPanel();
        hashBranch1 = new javax.swing.JLabel();
        jcBranch1 = new javax.swing.JComboBox();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jcBranch2 = new javax.swing.JComboBox();
        hashBranch2 = new javax.swing.JLabel();
        radioBranches = new javax.swing.JRadioButton();
        btRun = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLSelecByExt = new javax.swing.JLabel();
        comboFileExtension = new javax.swing.JComboBox();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Merge of Branches");

        jPanel2.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        jPanel2.setEnabled(false);

        hashBranch1.setText("<hash>");

        jcBranch1.setEnabled(false);
        jcBranch1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcBranch1ActionPerformed(evt);
            }
        });

        jLabel7.setText("Branch one's hash: ");

        jLabel8.setText("Branch two's hash: ");

        jcBranch2.setEnabled(false);
        jcBranch2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jcBranch2ActionPerformed(evt);
            }
        });

        hashBranch2.setText("<hash>");

        radioBranches.setText("Select Branches to Merge");
        radioBranches.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                radioBranchesStateChanged(evt);
            }
        });
        radioBranches.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                radioBranchesActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jcBranch2, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jcBranch1, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel8)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(hashBranch2))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(hashBranch1))
                            .addComponent(radioBranches))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(radioBranches)
                .addGap(5, 5, 5)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(hashBranch1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jcBranch1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel8)
                    .addComponent(hashBranch2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jcBranch2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        btRun.setText("Run");
        btRun.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btRunActionPerformed(evt);
            }
        });

        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/uff/ic/gems/tipmerge/icons/loading1.gif"))); // NOI18N
        jLabel1.setText("Loading ...");
        jLabel1.setVisible(false);

        jLSelecByExt.setText("Select by ");

        comboFileExtension.setModel(new javax.swing.DefaultComboBoxModel(new String[] { ".java", ".c", ".html", ".py", ".php", ".xml", "All Files" }));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(138, 138, 138)
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 200, Short.MAX_VALUE)
                        .addComponent(jLSelecByExt)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(comboFileExtension, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(14, 14, 14)
                        .addComponent(btRun, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(35, 35, 35)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btRun)
                    .addComponent(jLSelecByExt)
                    .addComponent(comboFileExtension, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addContainerGap(210, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jcBranch1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcBranch1ActionPerformed
        hashBranch1.setText(RunGit.getResult("git log -n 1 --pretty=format:%H " +jcBranch1.getSelectedItem().toString(), repoFiles.getRepository().getProject()));
    }//GEN-LAST:event_jcBranch1ActionPerformed

    private void jcBranch2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jcBranch2ActionPerformed
        hashBranch2.setText(RunGit.getResult("git log -n 1 --pretty=format:%H " +jcBranch2.getSelectedItem().toString(), repoFiles.getRepository().getProject()));
    }//GEN-LAST:event_jcBranch2ActionPerformed

    private void radioBranchesStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_radioBranchesStateChanged
        invertEnabledGroup();
        cleanResults();
    }//GEN-LAST:event_radioBranchesStateChanged

    private void radioBranchesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_radioBranchesActionPerformed

    }//GEN-LAST:event_radioBranchesActionPerformed

    private void btRunActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btRunActionPerformed
        Runnable r = () -> {
            jLabel1.setVisible(true);
            btRun.setEnabled(false);

            /**
            * At this time a merge will be created or
            * - the selection of branches
            * - by selecting one merge from the history
            */
            MergeFiles mergeSelected;
            //MergeCommits mCommits;
            MergeFilesDao mergeFilesDao = new MergeFilesDao();

            if (radioHistorical.isSelected()){
                String hash= codHash(jcMerge.getSelectedItem().toString());
                mergeSelected = mergeFilesDao.getMerge(hash, repoFiles.getRepository().getProject());

            }else{
                mergeSelected = new MergeFiles("", repoFiles.getRepository().getProject());
                mergeSelected.setParents(hashBranch1.getText(), hashBranch2.getText());
                mergeSelected.setHashBase(mergeFilesDao.getMergeBase(mergeSelected.getParents()[0], mergeSelected.getParents()[1], mergeSelected.getPath()));

            }

            /**
            * From now the merge already exists with parents and merge base, next steps are:
            * Set the files of that merge and committers that changed that files.
            */
            System.out.println(mergeSelected.getHash() + "\n" + mergeSelected.getHashBase() + "\n" + Arrays.toString(mergeSelected.getParents()));

            EditedFilesDao filesDao = new EditedFilesDao();
            mergeSelected.setFilesOnBranchOne(filesDao.getFiles(mergeSelected.getHashBase(),
                mergeSelected.getParents()[0],
                mergeSelected.getPath(),
                comboFileExtension.getSelectedItem().toString()));
        mergeSelected.setFilesOnBranchTwo(filesDao.getFiles(mergeSelected.getHashBase(),
            mergeSelected.getParents()[1],
            mergeSelected.getPath(),
            comboFileExtension.getSelectedItem().toString()));

    CommitterDao cmterDao = new CommitterDao();
    List<EditedFile> files = new LinkedList<>();

    for(EditedFile editedFile : mergeSelected.getFilesOnBranchOne()){
        List<Committer> whoEdited = cmterDao.getWhoEditedFile(mergeSelected.getHashBase(),
            mergeSelected.getParents()[0],
            editedFile.getFileName(),
            mergeSelected.getPath());
        if(whoEdited.size() > 0){
            editedFile.setWhoEditTheFile(whoEdited);
            files.add(editedFile);
        }
        }mergeSelected.setFilesOnBranchOne(files);

        files = new LinkedList<>();
        for(EditedFile editedFile : mergeSelected.getFilesOnBranchTwo()){
            List<Committer> whoEdited = cmterDao.getWhoEditedFile(mergeSelected.getHashBase(),
                mergeSelected.getParents()[1],
                editedFile.getFileName(),
                mergeSelected.getPath());
            if(whoEdited.size() > 0){
                editedFile.setWhoEditTheFile(whoEdited);
                files.add(editedFile);
            }
        }
        mergeSelected.setFilesOnBranchTwo(files);

        files = new LinkedList<>();
        for(EditedFile editedFile : mergeSelected.getFilesOnPreviousHistory()){
            List<Committer> whoEdited = cmterDao.getWhoEditedFile(repoFiles.getRepository().getFirstCommit(),
                mergeSelected.getHashBase(),
                editedFile.getFileName(),
                mergeSelected.getPath());
            if(whoEdited.size() > 0){
                editedFile.setWhoEditTheFile(whoEdited);
                files.add(editedFile);
            }
        }mergeSelected.setFilesOnPreviousHistory(new HashSet<>(files));

        //prints on the command line
        //showCommitters(mergeSelected);
        repoFiles.getMergeFiles().add(mergeSelected);

        this.setMergeFiles(mergeSelected);

        showResultsTable(this.getMergeFiles());
        //showResultsTable(this.getMergeFiles(),true);
        //showResIntersection(mCommits.getCommittersBothBranches());

        btExport.setEnabled(true);
        btZScore.setEnabled(true);
        btnChart1.setEnabled(true);
        btnChart2.setEnabled(true);
        jButtonDependencies.setEnabled(true);
        jLabel1.setVisible(false);
        btRun.setEnabled(true);
        };
        Thread t = new Thread(r);
        t.start();
    }//GEN-LAST:event_btRunActionPerformed

	/**
	 * @param args the command line arguments
	 */
	public static void main(String args[]) {
		/* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
		 * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
		 */
		try {
			for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
				if ("Nimbus".equals(info.getName())) {
					javax.swing.UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		} catch (ClassNotFoundException ex) {
			java.util.logging.Logger.getLogger(JFrameAssign.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (InstantiationException ex) {
			java.util.logging.Logger.getLogger(JFrameAssign.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (IllegalAccessException ex) {
			java.util.logging.Logger.getLogger(JFrameAssign.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (javax.swing.UnsupportedLookAndFeelException ex) {
			java.util.logging.Logger.getLogger(JFrameAssign.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		}
        //</editor-fold>

		/* Create and display the form */
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				new JFrameAssign().setVisible(true);
			}
		});
	}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btRun;
    private javax.swing.JComboBox comboFileExtension;
    private javax.swing.JLabel hashBranch1;
    private javax.swing.JLabel hashBranch2;
    private javax.swing.JLabel jLSelecByExt;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JComboBox jcBranch1;
    private javax.swing.JComboBox jcBranch2;
    private javax.swing.JRadioButton radioBranches;
    // End of variables declaration//GEN-END:variables
}
