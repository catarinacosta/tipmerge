/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package br.uff.ic.gems.tipmerge.gui;

import arch.Cell;
import arch.IMatrix2D;
import arch.MatrixDescriptor;
import br.uff.ic.gems.tipmerge.dao.MergeCommitsDao;
import br.uff.ic.gems.tipmerge.model.Coverage;
import br.uff.ic.gems.tipmerge.model.EditedFile;
import br.uff.ic.gems.tipmerge.model.Medalist;
import br.uff.ic.gems.tipmerge.model.MergeCommits;
import br.uff.ic.gems.tipmerge.model.MergeFiles;
import br.uff.ic.gems.tipmerge.model.RankingGenerator;
import br.uff.ic.gems.tipmerge.model.Repository;
import dao.DominoesSQLDao2;
import domain.Dominoes;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultCellEditor;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.renderer.category.LayeredBarRenderer;
import org.jfree.data.category.CategoryDataset;
import org.jfree.data.category.DefaultCategoryDataset;

/**
 *
 * @author j2cf
 */
public class JFrameAssignMerge extends javax.swing.JFrame {

	private JTable jTableRanking = new JTable();
	private String databaseName = "data/gitdataminer.sqlite";
	private Repository repository;
	public Set<EditedFile> filesOfInterest = new HashSet<>();
        private List<Coverage> coverageList1;
        private Map<String, Integer[]> fileNames1;

	public JFrameAssignMerge(Repository repository) {
		initComponents();
		initVariables(repository);
	}
		
	public JFrameAssignMerge(Repository repository, MergeFiles mergeFiles, Map<EditedFile,Set<EditedFile>> dependenciesBranchOne, Map<EditedFile,Set<EditedFile>> dependenciesBranchTwo) {
		initComponents();
		this.repository = repository;
		initVariables(repository);
		mergesList.setModel(new JComboBox(new String[]{mergeFiles.getHash()}).getModel());

//		if(dependenciesBranchOne.size() > 0)
			for(EditedFile file : dependenciesBranchOne.keySet()){
				this.filesOfInterest.add(file);
				this.filesOfInterest.addAll(dependenciesBranchOne.get(file));
			}
//		if(dependenciesBranchTwo.size() > 0)
			for(EditedFile file : dependenciesBranchTwo.keySet()){
				this.filesOfInterest.add(file);
				this.filesOfInterest.addAll(dependenciesBranchTwo.get(file));
			}
		this.filesOfInterest.addAll(mergeFiles.getFilesOnBothBranch());
		
		//System.out.println("Files Of Interest\t" + filesOfInterest);
	
		System.out.println("Medals for common files");
		RankingGenerator rGenerator = new RankingGenerator();
		Set<EditedFile> excepiontFiles = rGenerator.setMedalsFilesEditedBothBranches(mergeFiles);
		System.out.println("Medals for dependencies in branch 1");
		excepiontFiles = rGenerator.setMedalFromDependencies(dependenciesBranchOne, mergeFiles, excepiontFiles);
		System.out.println("Medals for dependencies in branch 2");
		excepiontFiles = rGenerator.setMedalFromDependencies(dependenciesBranchTwo, mergeFiles, excepiontFiles);
		excepiontFiles.removeAll(excepiontFiles);
		List<Medalist> ranking = rGenerator.getRanking();
		showRanking(ranking);
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel4 = new javax.swing.JPanel();
        jLabel13 = new javax.swing.JLabel();
        btRunCoverage = new javax.swing.JButton();
        txProjectName = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        mergesList = new javax.swing.JComboBox();
        labelLoading = new javax.swing.JLabel();
        btnCoverageChart = new javax.swing.JButton();
        paneResult = new javax.swing.JSplitPane();
        panelRanking = new javax.swing.JScrollPane();
        panelCoverage = new javax.swing.JScrollPane();
        txtCoverage = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Developer Assignments");

        jPanel4.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel13.setText("Repository Name");

        btRunCoverage.setText("Coverage");
        btRunCoverage.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btRunCoverageActionPerformed(evt);
            }
        });

        jLabel14.setText("Selected Merge");

        mergesList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mergesListActionPerformed(evt);
            }
        });

        labelLoading.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/uff/ic/gems/tipmerge/icons/loading1.gif"))); // NOI18N
        labelLoading.setText("Loading ...");
        labelLoading.setVisible(false);

        btnCoverageChart.setText("Coverage-Chart");
        btnCoverageChart.setEnabled(false);
        btnCoverageChart.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCoverageChartActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addComponent(labelLoading, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnCoverageChart)
                        .addGap(50, 50, 50)
                        .addComponent(btRunCoverage, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel13)
                            .addComponent(jLabel14))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(mergesList, 0, 517, Short.MAX_VALUE)
                            .addComponent(txProjectName))))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(txProjectName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel14)
                    .addComponent(mergesList, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 26, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btRunCoverage)
                    .addComponent(labelLoading)
                    .addComponent(btnCoverageChart))
                .addContainerGap())
        );

        paneResult.setBorder(javax.swing.BorderFactory.createEtchedBorder());
        paneResult.setDividerSize(10);
        paneResult.setOrientation(javax.swing.JSplitPane.VERTICAL_SPLIT);
        paneResult.setResizeWeight(0.4);
        paneResult.setToolTipText("");
        paneResult.setMinimumSize(new java.awt.Dimension(115, 143));
        paneResult.setPreferredSize(new java.awt.Dimension(154, 152));

        panelRanking.setBorder(javax.swing.BorderFactory.createTitledBorder("Ranking"));
        paneResult.setLeftComponent(panelRanking);

        panelCoverage.setBorder(javax.swing.BorderFactory.createTitledBorder("Coverage"));

        txtCoverage.setColumns(20);
        txtCoverage.setRows(5);
        txtCoverage.setText("Coverage datas");
        panelCoverage.setViewportView(txtCoverage);

        paneResult.setRightComponent(panelCoverage);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(paneResult, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(paneResult, javax.swing.GroupLayout.DEFAULT_SIZE, 337, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btRunCoverageActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btRunCoverageActionPerformed

		Runnable r;
		r = new Runnable() {

			public void run() {
				labelLoading.setVisible(true);
				
				MergeCommitsDao mCommitsDao = new MergeCommitsDao(repository.getProject());
				MergeCommits merge = new MergeCommits(mergesList.getSelectedItem().toString().split(" ")[0], repository.getProject());
				mCommitsDao.update(merge);
				
				List<String> hashsList = mCommitsDao.getHashs(merge.getHashBase(), merge.getParents()[0]);
				hashsList.addAll(mCommitsDao.getHashs(merge.getHashBase(), merge.getParents()[1]));
				
				try {
					
					List<Dominoes> dominoesList = DominoesSQLDao2.loadAllMatrices(databaseName, txProjectName.getText(), "CPU", hashsList);
					
					Dominoes dominoesDC = null, dominoesCM = null, dominoesFM = null;
					for(Dominoes dominoe : dominoesList){
						if(dominoe.getHistoric().toString().equals("DC"))
							dominoesDC = dominoe;
						if(dominoe.getHistoric().toString().equals("CM"))
							dominoesCM = dominoe;
						if (dominoe.getHistoric().toString().equals("FM"))
							dominoesFM = dominoe;
					}
					
					List<String[]> files = getFilesList(dominoesFM);
					
					//get wich developers edited methods
					Dominoes dominoesDM = dominoesDC.multiply(dominoesCM);
					
					List<Coverage> coverageList = getCoverageList(dominoesDM, files);
					coverageList1 = getCoverageList(dominoesDM, files);
					Map<String, Integer[]> fileNames = countsEditedMethods(files);
                                        fileNames1 = countsEditedMethods(files);
					
					appendCoverageToGui(files, coverageList, fileNames);
                                        btnCoverageChart.setEnabled(true);
                                        
					
				} catch (SQLException ex) {
					Logger.getLogger(JFrameAssignMerge.class.getName()).log(Level.SEVERE, null, ex);
				} catch (Exception ex) {
					Logger.getLogger(JFrameAssignMerge.class.getName()).log(Level.SEVERE, null, ex);
				}
				
				labelLoading.setVisible(false);
			}
			
		};
		Thread t = new Thread(r);
		t.start();
			
    }//GEN-LAST:event_btRunCoverageActionPerformed

	private List<String[]> getFilesList(Dominoes dominoesFM) {
		int cols;
		MatrixDescriptor matrixFM = dominoesFM.getMat().getMatrixDescriptor();
		cols = matrixFM.getNumCols();
		List<String[]> files = new ArrayList<>();
		for(int i = 0 ; i < cols ; i++){
			String[] file = matrixFM.getColumnAt(i).split("\\$", 2);
			if(filesOfInterest.contains(new EditedFile(file[0]))){
				int j = 0;
				while((j < files.size()) && (files.get(j)[0].compareTo(file[0]) < 0))
					j++;
				files.add(j,file);
			}
		}
		return files;
	}

	private List<Coverage> getCoverageList(Dominoes dominoesDM, List<String[]> files) {
		int rows;
		int cols;
		IMatrix2D matrixDM = dominoesDM.getMat();
		rows = matrixDM.getMatrixDescriptor().getNumRows();
		cols = matrixDM.getMatrixDescriptor().getNumCols();
		List<Cell> cells = matrixDM.getNonZeroData();
		List<Coverage> coverageList = new ArrayList<>();
		for(int i = 0 ; i < rows ; i++){

			Coverage coverage = new Coverage();
			coverage.setDeveloper(matrixDM.getMatrixDescriptor().getRowAt(i));

			for(int j = 0 ; j < cols ; j++){

				for(Cell c : cells)
					if((c.row == i) && (c.col == j)){

						for(String[] fullName : files)
							if(fullName[1].equals(matrixDM.getMatrixDescriptor().getColumnAt(j)))
								coverage.addValue(fullName);

					}

			}
			coverageList.add(coverage);

		}
		return coverageList;
	}

	private void appendCoverageToGui(List<String[]> files, List<Coverage> coverageList, Map<String, Integer[]> fileNames) {
		txtCoverage.setText("+-------- Files and Methods ---------+");
		files.stream().forEach((file) -> {
			txtCoverage.append("\n\t" + Arrays.toString(file));
		});

		txtCoverage.append("\n\n+-------- Coverage Sumary ---------+");
		for(Coverage coverage : coverageList){
			txtCoverage.append("\n" + coverage.getDeveloper());
			Map<String, Integer[]> cover = coverage.getCoverage(fileNames);
			for(String file : cover.keySet())
				txtCoverage.append("\n\t" + file + "\t" + Arrays.toString(cover.get(file)));
		}


		txtCoverage.append("\n\n+-------- Coverage Files ---------+");
		for(Coverage coverage : coverageList)
			txtCoverage.append(coverage.toString());
	}

	private Map<String, Integer[]> countsEditedMethods(List<String[]> files) {
		Map<String, Integer[]> fileNames = new HashMap<>();
		int totalMethodsFile = 0;
		String fileName = "";
		for(String[] fullFileName : files){
			if(!fileName.equals(fullFileName[0])){
				if (!fileName.isEmpty())
					fileNames.put(fileName, new Integer[]{totalMethodsFile});
				fileName = fullFileName[0];
				totalMethodsFile = 1;
			}else
				totalMethodsFile++;
		}
		fileNames.put(fileName, new Integer[]{totalMethodsFile});
		return fileNames;
	}

	/*
	private List<String[]> getFilesOfInterest(List<String[]> files) {
		List<String[]> newFileList = new ArrayList<>();
		for(String[] file : files){
			if(filesOfInterest.contains(new EditedFile(file[0])))
				newFileList.add(file);
		}
		return newFileList;
	}
	*/
	
    private void mergesListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mergesListActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_mergesListActionPerformed

    private void btnCoverageChartActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCoverageChartActionPerformed
        // Code Covergae Chart
          DefaultCategoryDataset chartData = new DefaultCategoryDataset();
          Vector selectedCommitters = new Vector();  
            for(int k = 0 ; k < jTableRanking.getRowCount(); k++){
                if((boolean)jTableRanking.getValueAt(k,0)== true) {
//                    System.out.println("\n"+jTableRanking.getValueAt(k,0)+(String)jTableRanking.getValueAt(k,2));
                    selectedCommitters.add((String)jTableRanking.getValueAt(k,2)); 
                }else{
//                    System.out.println("\nNão Selecionado"+(String)jTableRanking.getValueAt(k,2));
                }
            }
            int df =0;                         
            for(Coverage coverage : this.coverageList1){
                for(int i=0; i<selectedCommitters.size();i++){
                    String name1 = (String) selectedCommitters.get(i);
                    String name2 = coverage.getDeveloper()+" ";
                        if(name1.equalsIgnoreCase(name2)){
//                            System.out.print("Sucess");
                            Map<String, Integer[]> cover = coverage.getCoverage(this.fileNames1);
                                for(String file : cover.keySet()){
                                    Integer[] editedMethods = cover.get(file);
                                        chartData.addValue(editedMethods[0],"Total Files",file);
                                        chartData.addValue(editedMethods[1], coverage.getDeveloper(),file);
                                }            
                        }
                }
            }
          coverageChart(chartData);
    }//GEN-LAST:event_btnCoverageChartActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btRunCoverage;
    private javax.swing.JButton btnCoverageChart;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JLabel labelLoading;
    private javax.swing.JComboBox mergesList;
    private javax.swing.JSplitPane paneResult;
    private javax.swing.JScrollPane panelCoverage;
    private javax.swing.JScrollPane panelRanking;
    private javax.swing.JTextField txProjectName;
    private javax.swing.JTextArea txtCoverage;
    // End of variables declaration//GEN-END:variables

	private void showRanking(List<Medalist> ranking) {
		DefaultTableModel model = new DefaultTableModel();
		Icon mGold = new ImageIcon(getClass().getResource("/br/uff/ic/gems/tipmerge/icons/gold1.png"));
		Icon mSilver = new ImageIcon(getClass().getResource("/br/uff/ic/gems/tipmerge/icons/silver1.png"));
		Icon mBronze = new ImageIcon(getClass().getResource("/br/uff/ic/gems/tipmerge/icons/bronze1.png"));
		JLabel lblGold = new JLabel("Gold");
		JLabel lblSilver = new JLabel("Silver");
		JLabel lblBronze = new JLabel("Bronze");
		lblGold.setIcon(mGold);
		lblSilver.setIcon(mSilver);
		lblBronze.setIcon(mBronze);
		String[] columnLabels = {"Select","Ranking", "Committer", "Gold", "Silver", "Bronze", "Total"};
		model.setColumnIdentifiers(columnLabels);
		int rank = 1;
                    for(Medalist m : ranking){
                            int gold = m.getGoldMedals();
                            int silver = m.getSilverMedals();
                            int bronze = m.getBronzeMedals();
                            int total = gold + silver + bronze;
                            String name = m.getCommitter().getName();
                            model.addRow(new Object[]{Boolean.FALSE,rank++ + "º", name, gold, silver, bronze, total});
                    }
		jTableRanking.setModel(model);
                JCheckBox boxer = new JCheckBox();
		JTableRenderer jTableRender = new JTableRenderer();
		jTableRanking.getColumnModel().getColumn(3).setHeaderValue(lblGold);
		jTableRanking.getColumnModel().getColumn(3).setHeaderRenderer(jTableRender);
		jTableRanking.getColumnModel().getColumn(4).setHeaderValue(lblSilver);
		jTableRanking.getColumnModel().getColumn(4).setHeaderRenderer(jTableRender);
		jTableRanking.getColumnModel().getColumn(5).setHeaderValue(lblBronze);
		jTableRanking.getColumnModel().getColumn(5).setHeaderRenderer(jTableRender);
                jTableRanking.getColumnModel().getColumn(0).setCellEditor(new DefaultCellEditor(new JCheckBox()));
                jTableRanking.getColumnModel().getColumn(3).setCellRenderer(jTableRender);
                jTableRanking.getColumnModel().getColumn(4).setCellRenderer(jTableRender);
                jTableRanking.getColumnModel().getColumn(5).setCellRenderer(jTableRender);
		panelRanking.setViewportView(jTableRanking);
	}

	private void initVariables(Repository repository) {
		this.txProjectName.setText(repository.getName());	
		mergesList.setModel(new JComboBox(repository.getListOfMerges().toArray()).getModel());
	}
        
        public void coverageChart(CategoryDataset dados){
            CategoryAxis categoryAxis = new CategoryAxis("Edited Files");
            ValueAxis valueAxis = new NumberAxis("Methods");
                CategoryPlot plot = new CategoryPlot(dados,categoryAxis,valueAxis,new LayeredBarRenderer());
                    plot.setOrientation(PlotOrientation.HORIZONTAL);
                LayeredBarRenderer renderer = (LayeredBarRenderer) plot.getRenderer();
                    renderer.setSeriesBarWidth(0,1.5);
                    renderer.setSeriesBarWidth(1,1.0);
                    renderer.setSeriesBarWidth(0, 2.0);
                    renderer.setItemMargin(0.02);
                CategoryAxis domainAxis = plot.getDomainAxis();
                    domainAxis.setCategoryMargin(0.25);
                    domainAxis.setUpperMargin(0.05);
                    domainAxis.setLowerMargin(0.05);
                JFreeChart graphic = new JFreeChart("Coverge Chart",JFreeChart.DEFAULT_TITLE_FONT,plot,true);
                ChartPanel chartPanel = new ChartPanel(graphic);
                    chartPanel.setPreferredSize(new java.awt.Dimension(590, 350));
                JFrame chartFrame1 = new JFrame();
                    chartFrame1.setContentPane(chartPanel);
                    chartFrame1.setBounds(120, 20, 500, 500);
                    chartFrame1.setVisible(true);
        }
}
