/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package br.uff.ic.gems.tipmerge.gui;

import arch.Cell;
import arch.IMatrix2D;
import br.uff.ic.gems.tipmerge.dao.CommitterDao;
import br.uff.ic.gems.tipmerge.dao.EditedFilesDao;
import br.uff.ic.gems.tipmerge.dao.MergeCommitsDao;
import br.uff.ic.gems.tipmerge.dao.MergeFilesDao;
import br.uff.ic.gems.tipmerge.model.Committer;
import br.uff.ic.gems.tipmerge.model.Dependencies;
import br.uff.ic.gems.tipmerge.model.EditedFile;
import br.uff.ic.gems.tipmerge.model.Medalist;
import br.uff.ic.gems.tipmerge.model.MergeCommits;
import br.uff.ic.gems.tipmerge.model.MergeFiles;
import br.uff.ic.gems.tipmerge.model.RankingGenerator;
import br.uff.ic.gems.tipmerge.model.Repository;
import dao.DominoesSQLDao2;
import domain.Dominoes;
import java.io.File;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.Set;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JComboBox;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author j2cf
 */
public class JFrameDependencies extends javax.swing.JFrame {

	public static Repository repo;
	public static String databaseName = "data/gitdataminer.sqlite";
	public MergeFiles mergeFiles;
	public Map<EditedFile,Set<EditedFile>> dependenciesBranchOne;
	public Map<EditedFile,Set<EditedFile>> dependenciesBranchTwo;
	/*	/Users/j2cf/Apps/ws_nb/tipmerge/data  */
	
	/**
	 * Creates new form JFrameDependencies
	 * @param repository
	 */
	public JFrameDependencies(Repository repository) {
		initComponents();
		repo = repository;
		this.jTextField1.setText(repo.getName());	
		mergesList.setModel(new JComboBox(repo.getListOfMerges().toArray()).getModel());

	}

	public JFrameDependencies(Repository repository, MergeFiles mergeFiles){
		initComponents();
		this.repo = repository;
		this.mergeFiles = mergeFiles;
		this.jTextField1.setText(repo.getName());
		
		mergesList.setModel(new JComboBox(new String[]{mergeFiles.getHash()}).getModel());
	}

	
	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jRanking = new javax.swing.JFrame();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTableRanking = new javax.swing.JTable();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jButtonRun = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        mergesList = new javax.swing.JComboBox();
        spinnerThreshold = new javax.swing.JSpinner();
        jLabel2 = new javax.swing.JLabel();
        btnRanking = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtDependencies = new javax.swing.JTextArea();

        jRanking.setTitle("Ranking");
        jRanking.setBounds(50,50,500, 500);

        jTableRanking.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jTableRanking.setSize(500,500);
        jScrollPane2.setViewportView(jTableRanking);

        javax.swing.GroupLayout jRankingLayout = new javax.swing.GroupLayout(jRanking.getContentPane());
        jRanking.getContentPane().setLayout(jRankingLayout);
        jRankingLayout.setHorizontalGroup(
            jRankingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jRankingLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(15, Short.MAX_VALUE))
        );
        jRankingLayout.setVerticalGroup(
            jRankingLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jRankingLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 278, Short.MAX_VALUE)
                .addContainerGap())
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Dependencies Analysis");

        jPanel1.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel1.setText("Repository Name");

        jButtonRun.setText("Run");
        jButtonRun.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonRunActionPerformed(evt);
            }
        });

        jLabel3.setText("Selected Merge");

        mergesList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mergesListActionPerformed(evt);
            }
        });

        spinnerThreshold.setModel(new javax.swing.SpinnerNumberModel(0.5d, 0.0d, 1.0d, 0.1d));

        jLabel2.setText("Threshold:");

        btnRanking.setText("Generate the Ranking");
        btnRanking.setEnabled(false);
        btnRanking.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRankingActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(spinnerThreshold, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonRun, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnRanking)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(mergesList, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jTextField1, javax.swing.GroupLayout.DEFAULT_SIZE, 409, Short.MAX_VALUE))))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(mergesList, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 15, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(spinnerThreshold, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonRun)
                    .addComponent(btnRanking))
                .addContainerGap())
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder(""));

        txtDependencies.setColumns(20);
        txtDependencies.setRows(5);
        jScrollPane1.setViewportView(txtDependencies);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 211, Short.MAX_VALUE)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonRunActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonRunActionPerformed

		btnRanking.setEnabled(true);
		MergeCommitsDao mCommitsDao = new MergeCommitsDao(repo.getProject());
		MergeCommits merge = new MergeCommits(mergesList.getSelectedItem().toString().split(" ")[0], repo.getProject());
		mCommitsDao.update(merge);

		//Previous History
		List<String> previousHistory = mCommitsDao.getHashs(repo.getFirstCommit() , merge.getHashBase());
		
		
		try {

			System.out.println("\nCreating the dominoes of History");
			List<Dominoes> dominoesPreviousHistory = DominoesSQLDao2.loadAllMatrices(databaseName, jTextField1.getText(), "CPU", previousHistory);

			//multiplicando as matrizes e gerando a confidence
			Dominoes domCF = dominoesPreviousHistory.get(6);
			Dominoes domCFt = domCF.cloneNoMatrix();
			domCFt.transpose();
			Dominoes domFF = domCFt.multiply(domCF);
			domFF.confidence();
			
			if(mergeFiles == null){
				System.out.println("O merge files é null");
				MergeFilesDao mergeFilesDao = new MergeFilesDao();
				mergeFiles = mergeFilesDao.getMerge(mergesList.getSelectedItem().toString().split(" ")[0], repo.getProject());

				EditedFilesDao filesDao = new EditedFilesDao();
				mergeFiles.setFilesOnBranchOne(filesDao.getFiles(mergeFiles.getHashBase(), 
																			mergeFiles.getParents()[0], 
																			mergeFiles.getPath(),
																			".java"));
				mergeFiles.setFilesOnBranchTwo(filesDao.getFiles(mergeFiles.getHashBase(), 
																			mergeFiles.getParents()[1], 
																			mergeFiles.getPath(),
																			".java"));

				CommitterDao cmterDao = new CommitterDao();
				List<EditedFile> files = new LinkedList<>();
				for(EditedFile editedFile : mergeFiles.getFilesOnBranchOne()){
					List<Committer> whoEdited = cmterDao.getWhoEditedFile(mergeFiles.getHashBase(), 
												mergeFiles.getParents()[0], 
												editedFile.getFileName(), 
												mergeFiles.getPath());
					if(whoEdited.size() > 0){
						editedFile.setWhoEditTheFile(whoEdited);
						files.add(editedFile);
					}
				}mergeFiles.setFilesOnBranchOne(files);

				files = new LinkedList<>();
				for(EditedFile editedFile : mergeFiles.getFilesOnBranchTwo()){
					List<Committer> whoEdited = cmterDao.getWhoEditedFile(mergeFiles.getHashBase(), 
												mergeFiles.getParents()[1], 
												editedFile.getFileName(), 
												mergeFiles.getPath());
					if(whoEdited.size() > 0){
						editedFile.setWhoEditTheFile(whoEdited);
						files.add(editedFile);
					}
				}mergeFiles.setFilesOnBranchTwo(files);	
				
				files = new LinkedList<>();
				for(EditedFile editedFile : mergeFiles.getFilesOnPreviousHistory()){
					List<Committer> whoEdited = cmterDao.getWhoEditedFile(repo.getFirstCommit(), 
												mergeFiles.getHashBase(), 
												editedFile.getFileName(), 
												mergeFiles.getPath());
					if(whoEdited.size() > 0){
						editedFile.setWhoEditTheFile(whoEdited);
						files.add(editedFile);
					}
				}mergeFiles.setFilesOnPreviousHistory(new HashSet<>(files));
	
			}
			
			Dependencies dependencies = new Dependencies(domFF);
			double threshold = (double) spinnerThreshold.getValue();
			
			//System.out.println("Dependencies Branch One");
			this.dependenciesBranchOne = 
				dependencies.getDependenciesAcrossBranches(
					mergeFiles.getFilesOnBranchOne(), 
					mergeFiles.getFilesOnBranchTwo(),
					threshold);

			//System.out.println("Dependencies Branch Two");
			this.dependenciesBranchTwo = 
				dependencies.getDependenciesAcrossBranches(
					mergeFiles.getFilesOnBranchTwo(), 
					mergeFiles.getFilesOnBranchOne(),
					threshold);
			
			txtDependencies.setText("Dependencies Branch One\n");
			addListDependences(this.dependenciesBranchOne);
			txtDependencies.append("\nDependencies Branch Two\n");
			addListDependences(this.dependenciesBranchTwo);
			
		} catch (SQLException ex) {
			Logger.getLogger(JFrameDependencies.class.getName()).log(Level.SEVERE, null, ex);
		} catch (Exception ex) {
			Logger.getLogger(JFrameDependencies.class.getName()).log(Level.SEVERE, null, ex);
		}
		
    }//GEN-LAST:event_jButtonRunActionPerformed

	private void addListDependences(Map<EditedFile,Set<EditedFile>> dependencies) {
		
		dependencies.entrySet().stream().forEach((dependence) -> {
			EditedFile key = dependence.getKey();
			Set<EditedFile> value = dependence.getValue();
			txtDependencies.append(key.toString() + "\n" + "\t" + value.toString() + "\n");
		});
	}

    private void mergesListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mergesListActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_mergesListActionPerformed

    private void btnRankingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRankingActionPerformed
		RankingGenerator rGenerator = new RankingGenerator();	
		rGenerator.updateGoldMedals(mergeFiles);
		rGenerator.updateBronzeMedals(mergeFiles);
		//rGenerator.updateSilverMedals(mergeFiles, this.dependenciesBranchOne, this.dependenciesBranchTwo);
		System.out.println("RAMO 1");
		rGenerator.setMedalFromDependencies(this.dependenciesBranchOne, mergeFiles.getFilesOnBothBranch(), mergeFiles.getFilesOnPreviousHistory());
		System.out.println("RAMO 2");
		rGenerator.setMedalFromDependencies(this.dependenciesBranchTwo, mergeFiles.getFilesOnBothBranch(), mergeFiles.getFilesOnPreviousHistory());
		List<Medalist> ranking = rGenerator.getRanking();
		
		
		DefaultTableModel model = new DefaultTableModel();
		jRanking.setVisible(true);
		model.addColumn("Commiter");
		model.addColumn("Gold");
		model.addColumn("Silver");
		model.addColumn("Bronze");
		for(Medalist m : ranking){
			model.addRow(new Object[]{m.getCommitter().getName(),m.getGoldMedals(),m.getSilverMedals(),m.getBronzeMedals()});
		}
		jTableRanking.setModel(model);

    }//GEN-LAST:event_btnRankingActionPerformed

	/**
	 * @param args the command line arguments
	 */
	public static void main(String args[]) {
		/* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
		 * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
		 */
		try {
			for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
				if ("Nimbus".equals(info.getName())) {
					javax.swing.UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		} catch (ClassNotFoundException ex) {
			java.util.logging.Logger.getLogger(JFrameDependencies.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (InstantiationException ex) {
			java.util.logging.Logger.getLogger(JFrameDependencies.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (IllegalAccessException ex) {
			java.util.logging.Logger.getLogger(JFrameDependencies.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (javax.swing.UnsupportedLookAndFeelException ex) {
			java.util.logging.Logger.getLogger(JFrameDependencies.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		}
        //</editor-fold>
        //</editor-fold>

		/* Create and display the form */
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				new JFrameDependencies(new Repository(new File("/Users/j2cf/Apps/clones/voldemort"))).setVisible(true);
			}
		});
	}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnRanking;
    private javax.swing.JButton jButtonRun;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JFrame jRanking;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTableRanking;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JComboBox mergesList;
    private javax.swing.JSpinner spinnerThreshold;
    private javax.swing.JTextArea txtDependencies;
    // End of variables declaration//GEN-END:variables

	private StringBuilder printDominoes(Dominoes dominoes, double threshold, Collection<EditedFile> filesEdited) {
		
		StringBuilder strBuilder = new StringBuilder();
		
		IMatrix2D matrix = dominoes.getMat();

		System.out.println("getDevice\t" + dominoes.getDevice());
		System.out.println("getHistoric\t" + dominoes.getHistoric().toString());

		System.out.println("getColType\t" + matrix.getMatrixDescriptor().getColType());
		System.out.println("getRowType\t" + matrix.getMatrixDescriptor().getRowType());
		System.out.println("getNumRows\t" + matrix.getMatrixDescriptor().getNumRows());
		System.out.println("getNumCols\t" + matrix.getMatrixDescriptor().getNumCols());
		
		strBuilder.append("File Dependencies.\n\n");
		
		List<Cell> cells = matrix.getNonZeroData();
		int rows = matrix.getMatrixDescriptor().getNumRows();
		int cols = matrix.getMatrixDescriptor().getNumCols();
		
		for(int i = 0 ; i < rows ; i++){
			
			EditedFile efTemp = new EditedFile(matrix.getMatrixDescriptor().getRowAt(i));
			
			if(filesEdited.contains(efTemp)){
			
				System.out.println(efTemp);
				strBuilder.append(efTemp).append("\n");
				boolean hasDepencies = false;
				
				for(int j = 0 ; j < cols ; j++){

					if((i != j) && (filesEdited.contains(new EditedFile(matrix.getMatrixDescriptor().getColumnAt(j))))){

						for(Cell c : cells){
							if((c.value >= threshold) && (c.row == i) && (c.col == j)){
								System.out.println("\t" + c.value + "\t" + matrix.getMatrixDescriptor().getColumnAt(j));
								strBuilder.append("\t").append(c.value)
									.append("\t").append(matrix.getMatrixDescriptor().getColumnAt(j))
									.append("\n");
								hasDepencies = true;
							}
						}
					}
				}
				if(!hasDepencies){
					int lastIndex = strBuilder.lastIndexOf(efTemp.getFileName());
					strBuilder.replace(lastIndex, lastIndex + efTemp.getFileName().length(), "");
				}
				System.out.println();
			}
		}
		return strBuilder;
	}

	/**
	 * Returns a list of files that have some dependence with the 
	 * list of filesEdited files, following the defined threshold.
	 * @param dominoes
	 * @param threshold
	 * @param filesEdited
	 * @return 
	 */
	private Set<EditedFile> getFileDependencies2(Dominoes dominoes, double threshold, Collection<EditedFile> filesEdited) {
		
		//TODO colocar a informação do across ramos
		Set<EditedFile> dependecies = new HashSet<>();

		IMatrix2D matrix = dominoes.getMat();

		int rows = matrix.getMatrixDescriptor().getNumRows();
		int cols = matrix.getMatrixDescriptor().getNumCols();
		
		List<Cell> cells = matrix.getNonZeroData();
		
		for(int i = 0 ; i < rows ; i++){
			
			EditedFile efTemp = new EditedFile(matrix.getMatrixDescriptor().getRowAt(i));
			
			if(filesEdited.contains(efTemp))
				
				for(int j = 0 ; j < cols ; j++)

					if((i != j) && (filesEdited.contains(new EditedFile(matrix.getMatrixDescriptor().getColumnAt(j)))))

						for(Cell c : cells)
							if((c.value >= threshold) && (c.row == i) && (c.col == j))
								dependecies.add(new EditedFile(matrix.getMatrixDescriptor().getColumnAt(j)));
						
		}
		return dependecies;
	}

}
