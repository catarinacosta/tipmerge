/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package br.uff.ic.gems.tipmerge.gui;

import br.uff.ic.gems.tipmerge.coverage.TreeTable;
import br.uff.ic.gems.tipmerge.model.EditedFile;
import br.uff.ic.gems.tipmerge.model.Medalist;
import br.uff.ic.gems.tipmerge.model.MergeFiles;
import br.uff.ic.gems.tipmerge.model.RankingGenerator;
import br.uff.ic.gems.tipmerge.model.Repository;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.GradientPaint;
import java.util.HashSet;
import java.util.List;
import java.util.Map;
import java.util.Set;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.SpinnerNumberModel;
import javax.swing.table.DefaultTableModel;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.axis.CategoryAxis;
import org.jfree.chart.axis.NumberAxis;
import org.jfree.chart.axis.ValueAxis;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.chart.renderer.category.BarRenderer;
import org.jfree.chart.renderer.category.LayeredBarRenderer;
import org.jfree.data.category.CategoryDataset;

/**
 *
 * @author j2cf
 */
public class JFrameRankingCoverageFile extends javax.swing.JFrame {

    final private JTable jTableRanking = new JTable();
//    final private String databaseName = "data/gitdataminer.sqlite";
//    private Repository repository;
    private RankingGenerator rGenerator;
    private MergeFiles mergeFiles;
    private Map<EditedFile, Set<EditedFile>> dependenciesBranchOne;
    private Map<EditedFile, Set<EditedFile>> dependenciesBranchTwo;
    
    public Set<EditedFile> filesOfInterest = new HashSet<>();

    public JFrameRankingCoverageFile(Repository repository, MergeFiles mergeFiles, Map<EditedFile, Set<EditedFile>> dependenciesBranchOne, Map<EditedFile, Set<EditedFile>> dependenciesBranchTwo) {
        initComponents();
        initVariables(repository);
        this.mergeFiles = mergeFiles;
        this.dependenciesBranchOne = dependenciesBranchOne;
        this.dependenciesBranchTwo = dependenciesBranchTwo;

        mergesList.setModel(new JComboBox(new String[]{mergeFiles.getHash()}).getModel());

        for (EditedFile file : dependenciesBranchOne.keySet()) {
            this.filesOfInterest.add(file);
            this.filesOfInterest.addAll(dependenciesBranchOne.get(file));
        }
        for (EditedFile file : dependenciesBranchTwo.keySet()) {
            this.filesOfInterest.add(file);
            this.filesOfInterest.addAll(dependenciesBranchTwo.get(file));
        }
        this.filesOfInterest.addAll(mergeFiles.getFilesOnBothBranch());

        this.createAndShowCoverage();
        ((SpinnerNumberModel) this.rankingSpinner.getModel()).setMinimum(rGenerator.getDevelopersQuantity() * 5);
        this.rankingSpinner.setValue(rGenerator.getDevelopersQuantity() * rGenerator.getDevelopersQuantity() + rGenerator.getDevelopersQuantity());
        
    }
    
    private void createAndShowCoverage() {
        rGenerator = new RankingGenerator();
        rGenerator.createMedals(mergeFiles, dependenciesBranchOne, dependenciesBranchTwo);
        showCoverage(rGenerator);
    }
    
    private void extendAndShowCoverage() {
        Runnable r;
        r = new Runnable() {

            @Override
            public void run() {
                labelLoading.setVisible(true);
                combineButton.setEnabled(false);
                rGenerator.combineDevelopers(
                    (Integer) devNumberSpinner.getValue(),
                    ((double) ((Integer) coverageSpinner.getValue())) / 100.0,
                    (Integer) iterationsSpinner.getValue(),
                    (Integer) timeSpinner.getValue(),
                    (Integer) rankingSpinner.getValue(),
                    fitnessComboBox.getSelectedIndex());
                showCoverage(rGenerator);
                combineButton.setEnabled(true);
                labelLoading.setVisible(false);
            }

        };
        Thread t = new Thread(r);
        t.start();
       
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel4 = new javax.swing.JPanel();
        jLabel13 = new javax.swing.JLabel();
        txProjectName = new javax.swing.JTextField();
        jLabel14 = new javax.swing.JLabel();
        mergesList = new javax.swing.JComboBox();
        labelLoading = new javax.swing.JLabel();
        combineButton = new javax.swing.JButton();
        devNumberSpinner = new javax.swing.JSpinner();
        jLabel1 = new javax.swing.JLabel();
        coverageSpinner = new javax.swing.JSpinner();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        iterationsSpinner = new javax.swing.JSpinner();
        timeSpinner = new javax.swing.JSpinner();
        jLabel4 = new javax.swing.JLabel();
        fitnessComboBox = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        resetButton = new javax.swing.JButton();
        rankingSpinner = new javax.swing.JSpinner();
        jLabel6 = new javax.swing.JLabel();
        jPanelCover = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Developers Recommendation");

        jPanel4.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        jLabel13.setText("Repository Name");

        txProjectName.setEnabled(false);

        jLabel14.setText("Branches");

        mergesList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                mergesListActionPerformed(evt);
            }
        });

        labelLoading.setIcon(new javax.swing.ImageIcon(getClass().getResource("/br/uff/ic/gems/tipmerge/icons/loading1.gif"))); // NOI18N
        labelLoading.setText("Loading ...");
        labelLoading.setVisible(false);

        combineButton.setText("Recalculate");
        combineButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                combineButtonActionPerformed(evt);
            }
        });

        devNumberSpinner.setValue(1);

        jLabel1.setText("Developers (#)");

        coverageSpinner.setValue(0);

        jLabel2.setText("Coverage (%)");

        jLabel3.setText("Iterations (#)");

        iterationsSpinner.setValue(300);

        timeSpinner.setValue(300);

        jLabel4.setText("Time (seconds)");

        fitnessComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Medals", "Coverage" }));
        fitnessComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fitnessComboBoxActionPerformed(evt);
            }
        });

        jLabel5.setText("Fitness");

        resetButton.setText("Reset");
        resetButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                resetButtonActionPerformed(evt);
            }
        });

        rankingSpinner.setValue(0);

        jLabel6.setText("Ranking (#)");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel13)
                    .addComponent(jLabel14)
                    .addComponent(labelLoading, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(rankingSpinner)
                                .addGap(24, 24, 24)
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(coverageSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel4Layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(fitnessComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 104, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(timeSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(devNumberSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(iterationsSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(combineButton, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(resetButton, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(mergesList, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txProjectName))))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel13)
                    .addComponent(txProjectName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel14)
                    .addComponent(mergesList, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(labelLoading)
                        .addComponent(devNumberSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel1)
                        .addComponent(coverageSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel2)
                        .addComponent(jLabel6)
                        .addComponent(rankingSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(combineButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(iterationsSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(timeSpinner, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4)
                    .addComponent(fitnessComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(resetButton, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)))
        );

        jPanelCover.setBorder(javax.swing.BorderFactory.createEtchedBorder());

        javax.swing.GroupLayout jPanelCoverLayout = new javax.swing.GroupLayout(jPanelCover);
        jPanelCover.setLayout(jPanelCoverLayout);
        jPanelCoverLayout.setHorizontalGroup(
            jPanelCoverLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanelCoverLayout.setVerticalGroup(
            jPanelCoverLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 301, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanelCover, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanelCover, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents


    private void mergesListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_mergesListActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_mergesListActionPerformed

    private void combineButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_combineButtonActionPerformed
        this.extendAndShowCoverage();
    }//GEN-LAST:event_combineButtonActionPerformed

    private void fitnessComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fitnessComboBoxActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fitnessComboBoxActionPerformed

    private void resetButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resetButtonActionPerformed
        Runnable r;
        r = new Runnable() {

            @Override
            public void run() {
                labelLoading.setVisible(true);
                resetButton.setEnabled(false);
                rGenerator.reset();
                showCoverage(rGenerator);
                resetButton.setEnabled(true);
                labelLoading.setVisible(false);
            }

        };
        Thread t = new Thread(r);
        t.start();
    }//GEN-LAST:event_resetButtonActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton combineButton;
    private javax.swing.JSpinner coverageSpinner;
    private javax.swing.JSpinner devNumberSpinner;
    private javax.swing.JComboBox<String> fitnessComboBox;
    private javax.swing.JSpinner iterationsSpinner;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanelCover;
    private javax.swing.JLabel labelLoading;
    private javax.swing.JComboBox mergesList;
    private javax.swing.JSpinner rankingSpinner;
    private javax.swing.JButton resetButton;
    private javax.swing.JSpinner timeSpinner;
    private javax.swing.JTextField txProjectName;
    // End of variables declaration//GEN-END:variables

    private void showRanking(List<Medalist> ranking) {
        DefaultTableModel model = new DefaultTableModel() {
            @Override
            public Class<?> getColumnClass(int column) {
                if (column == 0) //Return the first column as checkbox  
                {
                    return Boolean.class;
                }
                return super.getColumnClass(column);
            }
        };
        Icon mGold = new ImageIcon(getClass().getResource("/br/uff/ic/gems/tipmerge/icons/gold1.png"));
        Icon mSilver = new ImageIcon(getClass().getResource("/br/uff/ic/gems/tipmerge/icons/silver1.png"));
        Icon mBronze = new ImageIcon(getClass().getResource("/br/uff/ic/gems/tipmerge/icons/bronze1.png"));
        JLabel lblGold = new JLabel("Gold");
        JLabel lblSilver = new JLabel("Silver");
        JLabel lblBronze = new JLabel("Bronze");
        lblGold.setIcon(mGold);
        lblSilver.setIcon(mSilver);
        lblBronze.setIcon(mBronze);
        String[] columnLabels = {"Select", "Ranking", "Committer", "Gold", "Silver", "Bronze", "Total"};
        model.setColumnIdentifiers(columnLabels);
        int rank = 1;
        for (Medalist m : ranking) {
            int gold = m.getGoldMedals();
            int silver = m.getSilverMedals();
            int bronze = m.getBronzeMedals();
            int total = gold + silver + bronze;
            String name = m.getCommitter().getName();
            model.addRow(new Object[]{Boolean.FALSE, rank++ + "º", name, gold, silver, bronze, total});
        }
        jTableRanking.setModel(model);
        JCheckBox boxer = new JCheckBox();
        JTableRenderer jTableRender = new JTableRenderer();
        jTableRanking.getColumnModel().getColumn(3).setHeaderValue(lblGold);
        jTableRanking.getColumnModel().getColumn(3).setHeaderRenderer(jTableRender);
        jTableRanking.getColumnModel().getColumn(4).setHeaderValue(lblSilver);
        jTableRanking.getColumnModel().getColumn(4).setHeaderRenderer(jTableRender);
        jTableRanking.getColumnModel().getColumn(5).setHeaderValue(lblBronze);
        jTableRanking.getColumnModel().getColumn(5).setHeaderRenderer(jTableRender);
        jTableRanking.getColumnModel().getColumn(3).setCellRenderer(jTableRender);
        jTableRanking.getColumnModel().getColumn(4).setCellRenderer(jTableRender);
        jTableRanking.getColumnModel().getColumn(5).setCellRenderer(jTableRender);
        //panelRanking.setViewportView(jTableRanking);
    }

    private void initVariables(Repository repository) {
        this.txProjectName.setText(repository.getName());
        mergesList.setModel(new JComboBox(repository.getListOfMerges().toArray()).getModel());
    }

    public void coverageChart(CategoryDataset dados) {
        CategoryAxis categoryAxis = new CategoryAxis("Modified Files");
        ValueAxis valueAxis = new NumberAxis("Number of Methods");
        CategoryPlot plot = new CategoryPlot(dados, categoryAxis, valueAxis, new LayeredBarRenderer());
        plot.setOrientation(PlotOrientation.HORIZONTAL);
        LayeredBarRenderer renderer = (LayeredBarRenderer) plot.getRenderer();
        renderer.setSeriesBarWidth(0, 1.5);
        renderer.setSeriesBarWidth(1, 0.6);
        renderer.setItemMargin(0.02);
        CategoryAxis domainAxis = plot.getDomainAxis();
        domainAxis.setCategoryMargin(0.25);
        domainAxis.setUpperMargin(0.05);
        domainAxis.setLowerMargin(0.05);
        BarRenderer rendered1 = (BarRenderer) plot.getRenderer();
        rendered1.setDrawBarOutline(false);
        GradientPaint gradientpaint1 = new GradientPaint(0.0F, 0.0F, Color.GRAY, 0.0F, 0.0F, new Color(0, 0, 0));
        GradientPaint gradientpaint2 = new GradientPaint(0.0F, 0.0F, Color.GREEN, 0.0F, 0.0F, new Color(0, 64, 0));
        rendered1.setSeriesPaint(0, gradientpaint1);
        rendered1.setSeriesPaint(1, gradientpaint2);
        JFreeChart graphic = new JFreeChart("Coverage Chart", JFreeChart.DEFAULT_TITLE_FONT, plot, true);
        ChartPanel chartPanel = new ChartPanel(graphic);
        chartPanel.setPreferredSize(new java.awt.Dimension(590, 350));
        JFrame chartFrame1 = new JFrame();
        chartFrame1.setContentPane(chartPanel);
        chartFrame1.setBounds(120, 20, 500, 500);
        chartFrame1.setVisible(true);
    }

    private void showCoverage(RankingGenerator ranking) {

        Runnable r;
        r = new Runnable() {

            public void run() {
                labelLoading.setVisible(true);

                TreeTable treeTable = new TreeTable(ranking);

                JScrollPane jpanel = new JScrollPane(treeTable.getTreeTable());

                jpanel.setPreferredSize(jPanelCover.getPreferredSize());
                jPanelCover.removeAll();
                jPanelCover.setLayout(new BorderLayout());
                jPanelCover.add(jpanel);
                jPanelCover.updateUI();

                labelLoading.setVisible(false);
            }

        };
        Thread t = new Thread(r);
        t.start();

    }

}
